# -------------------------------------------------------------------
# GitHub Issues & Milestones for HatoLink Project
# -------------------------------------------------------------------

milestones:
  - name: "Release-2: 運用基盤の確立"
    goal: "スプレッドシートを使った手動でのデータ管理を可能にし、基本的なエラーハンドリングを導入して信頼性のある運用を開始する。"
  - name: "Release-3: 機能拡張フェーズ"
    goal: "運用のフィードバックを元に、エンゲージメント向上施策や、さらなる運用効率化を進める。"
  - name: "技術的負債の返済"
    goal: "優先度P0で特定されている既存コードのリファクタリングタスクを集中して解決する。"

labels:
  - category: "Type"
    items:
      - "type:user-story"
      - "type:technical-task"
      - "type:refactoring"
      - "type:chore"
      - "type:test"
  - category: "Layer"
    items:
      - "layer:domain"
      - "layer:usecase"
      - "layer:adapter-db"
      - "layer:adapter-api"
      - "layer:adapter-ui"
      - "layer:infrastructure"
  - category: "Epic"
    items:
      - "epic:core-engine"
      - "epic:content-management"
      - "epic:platform"
  - category: "DDD"
    items:
      - "ddd:modeling"
      - "ddd:aggregate"
      - "ddd:value-object"
      - "ddd:repository"
  - category: "Priority"
    items:
      - "priority:P0-must-have"
      - "priority:P1-should-have"
      - "priority:P2-could-have"
  - category: "Status"
    items:
      - "TDD"
      - "needs-discussion"
      - "blocked"

issues:
  - title: "[UserStory] スプレッドシートでの個別ツイート管理に対応 (US-005a)"
    description: |
      ユーザーストーリー `US-005a` を実装する。
      > コンテンツ管理者として、Googleスプレッドシートを直接編集することで、ツイートを個別に予約・編集・削除したい。
      > それは、専用UIがなくても、すぐに柔軟な運用を開始するためだ。
    implementation_tasks:
      - "hatolink/adapter/db/SpreadsheetTweetRepository.js を改修し、シートから読み込んだ全データと既存のTweet IDを比較し、新規・変更・削除を検知するロジックを検討・実装する。"
      - "新規追加された行を新しい Tweet として認識し、システム内で扱えるようにする。"
      - "既存の行の内容変更を検知し、対応する Tweet オブジェクトに反映させる。"
      - "行が削除された場合に、それを予約キャンセルとして扱うロジックを実装する。"
      - "(TDD) コンテンツ管理者の手動操作（追加・変更・削除）をシミュレートしたテストケースを tests/adapter/db/SpreadsheetTweetRepository.test.js に拡充する。"
    acceptance_criteria:
      - "スプレッドシートに新しい行を追加し、必要な項目を埋めると、それが新しい予約ツイートとして認識されること。"
      - "「未投稿」ステータスのツイートの行情報をスプレッドシート上で変更すると、予約内容が更新されること。"
      - "「未投稿」ステータスのツイートの行をスプレッドシートから削除すると、予約がキャンセルされること。"
    related_requirement: "US-005a, FR-002"
    dependencies:
      - "TASK-001"
    milestone: "Release-2: 運用基盤の確立"
    labels:
      - "type:user-story"
      - "layer:adapter-db"
      - "epic:content-management"
      - "priority:P1-should-have"
      - "TDD"

  - title: "[UserStory] 投稿失敗の記録機能を実装する (US-003)"
    description: |
      ユーザーストーリー `US-003` を実装する。
      > コンテンツ管理者として、ツイートの投稿に失敗した場合、その事実がログとして記録されてほしい。
      > それは、どの投稿が落ちたのかを後から追跡できるようにするためだ。
    implementation_tasks:
      - "エラー情報を保持する ErrorLog オブジェクトを domain レイヤーに定義する。"
      - "usecase レイヤーに IErrorLogRepository インターフェースを定義する。"
      - "adapter-db レイヤーに SpreadsheetErrorLogRepository を実装し、エラー情報を専用のエラーログシートに追記する処理を実装する。"
      - "PostScheduledTweetsUseCase に IErrorLogRepository を注入し、投稿失敗時に catch ブロック内でエラー記録処理を呼び出すように修正する。"
      - "(TDD) SpreadsheetErrorLogRepository のテストを作成する。"
      - "(TDD) PostScheduledTweetsUseCase のテストに、API失敗時にエラーログ記録とステータス更新が正しく行われることを検証するケースを追加する。"
    acceptance_criteria:
      - "Twitter APIへの投稿が失敗した場合、専用のエラーログシートに「日時」「対象ツイートの内容（またはID）」「エラー理由」が記録されること。"
      - "投稿に失敗した元のツイートのステータスが「失敗」に更新されること。"
    related_requirement: "US-003, FR-006"
    dependencies:
      - "US-001"
      - "TASK-004"
    milestone: "Release-2: 運用基盤の確立"
    labels:
      - "type:user-story"
      - "layer:domain"
      - "layer:usecase"
      - "layer:adapter-db"
      - "epic:core-engine"
      - "priority:P1-should-have"
      - "TDD"

Completed:
  - title: "[TechTask] プロジェクト基盤のセットアップ（クリーンアーキテクチャ） (TASK-001)"
    description: "Google Apps Scriptプロジェクトの初期設定を行い、クリーンアーキテクチャに基づいた開発基盤を構築する。"
    implementation_tasks:
      - "claspを利用してGoogle Apps Scriptプロジェクトを作成し、ローカル開発環境を整備する。"
      - "クリーンアーキテクチャに基づいたディレクトリ構造（例: domain, usecase, adapter, infrastructure）を作成する。"
      - "GAS用のテストフレームワーク（例: GasT）を導入し、テスト実行の仕組みを整える。"
    acceptance_criteria:
      - "定義されたディレクトリ構造でプロジェクトが初期化されていること。"
      - "サンプルのテストコードが実行でき、成功すること。"
    related_requirement: "TASK-001"
    dependencies: []
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:technical-task"
      - "layer:infrastructure"
      - "epic:platform"
      - "priority:P0-must-have"

  - title: "[TechTask] Twitter APIアダプタの実装 (TASK-002)"
    description: "Twitter APIとの通信を担うアダプタを、クリーンアーキテクチャの原則に従い実装する。"
    implementation_tasks:
      - "usecaseレイヤーにTwitter APIとの通信を抽象化する`ITwitterApi`インターフェースを定義する。"
      - "adapter-apiレイヤーに`TwitterApiAdapter`クラスを作成し、`ITwitterApi`を実装する。"
      - "GASの`UrlFetchApp`を用いて、ツイート投稿APIを呼び出す処理を実装する。"
      - "Twitter APIの認証情報をGASの`PropertiesService`で安全に管理する仕組みを実装する。"
      - "(TDD) `TwitterApiAdapter`の単体テストを作成する。API通信部分はモック化すること。"
    acceptance_criteria:
      - "`ITwitterApi`インターフェースの仕様を満たすこと。"
      - "認証情報がコードにハードコーディングされていないこと。"
      - "作成したテストがすべて成功すること。"
    related_requirement: "TASK-002"
    dependencies:
      - "TASK-001"
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:technical-task"
      - "layer:adapter-api"
      - "layer:usecase"
      - "epic:platform"
      - "priority:P0-must-have"
      - "TDD"

  - title: "[Domain] ツイート集約のドメインモデル実装 (US-001)"
    description: "ユーザーストーリー`US-001`の中核となる`ツイート`のドメインモデルを実装する。`requirements.yaml`のドメインモデル定義も参照すること。"
    implementation_tasks:
      - "`Tweet`集約ルートエンティティを実装する (id, body, status, scheduledAtなど)。"
      - "`TweetBody`や`PostStatus`などの値オブジェクトを実装し、不変条件（文字数制限など）をカプセル化する。"
      - "`Tweet`エンティティの状態を変更するドメインロジック（例: `markAsPosted()`）を実装する。"
      - "(TDD) `Tweet`エンティティと関連する値オブジェクトの単体テストを作成する。"
    acceptance_criteria:
      - "`Tweet`が自身の不変条件（ステータスの遷移など）を維持できること。"
      - "`TweetBody`が文字数制限のルールを正しく検証できること。"
      - "単体テストのカバレッジが目標値を満たしていること。"
    related_requirement: "US-001"
    dependencies:
      - "TASK-001"
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:user-story"
      - "layer:domain"
      - "epic:core-engine"
      - "priority:P0-must-have"
      - "TDD"
      - "ddd:modeling"
      - "ddd:aggregate"

  - title: "[Adapter] スプレッドシート用TweetRepositoryの実装 (US-001)"
    description: "`Tweet`集約をGoogleスプレッドシートに永続化するためのリポジトリアダプタを実装する。"
    implementation_tasks:
      - "usecaseレイヤーに`ITweetRepository`インターフェースを定義する (`findByStatus...`, `save`など)。"
      - "adapter-dbレイヤーに`SpreadsheetTweetRepository`クラスを作成し、インターフェースを実装する。"
      - "GASの`SpreadsheetApp`を使い、シートのデータを`Tweet`オブジェクトへマッピングする処理を実装する。"
      - "`Tweet`オブジェクトの変更をシートへ書き戻す処理を実装する。"
      - "(TDD) スプレッドシートをモック、またはテスト用シートを用意して、リポジトリの結合テストを作成する。"
    acceptance_criteria:
      - "`ITweetRepository`のインターフェース仕様を満たすこと。"
      - "スプレッドシートとの間で`Tweet`集約の読み書きが正しく行えること。"
      - "作成したテストがすべて成功すること。"
    related_requirement: "US-001"
    dependencies:
      - "[Domain] ツイート集約のドメインモデル実装 (US-001)"
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:technical-task"
      - "layer:adapter-db"
      - "layer:usecase"
      - "epic:core-engine"
      - "priority:P0-must-have"
      - "TDD"
      - "ddd:repository"

  - title: "[UseCase] 予約ツイート自動投稿ユースケースの実装 (US-001)"
    description: "予約日時を過ぎた未投稿ツイートを検索し、投稿を実行するユースケースを実装する。"
    implementation_tasks:
      - "`usecase`レイヤーに`PostScheduledTweetsUseCase`を実装する。"
      - "`ITweetRepository`と`ITwitterApi`のインターフェースに依存するように設計する。"
      - "実装ロジック: 1. `ITweetRepository`を使い、投稿対象のツイートを取得する。 2. 取得した各ツイートに対し、`ITwitterApi`を呼び出して投稿する。 3. 成功した場合、`Tweet`エンティティのステータスを更新し、`ITweetRepository`で保存する。"
      - "(TDD) リポジトリとAPIアダプタをモックし、ユースケースの単体テストを作成する。"
    acceptance_criteria:
      - "投稿キュー（スプレッドシート）の指定した時刻を過ぎた「未投稿」ステータスのツイートが、Twitterに正しく投稿されること。"
      - "投稿が成功した場合、該当ツイートのステータスが「投稿済」に更新され、「投稿完了日時」が記録されること。"
    related_requirement: "US-001"
    dependencies:
      - "[Domain] ツイート集約のドメインモデル実装 (US-001)"
      - "[TechTask] Twitter APIアダプタの実装 (TASK-002)"
      - "[Adapter] スプレッドシート用TweetRepositoryの実装 (US-001)"
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:user-story"
      - "layer:usecase"
      - "epic:core-engine"
      - "priority:P0-must-have"
      - "TDD"

  - title: "[Infra] 定期実行トリガーの設定 (US-001)"
    description: "`PostScheduledTweetsUseCase`を定期的に実行するためのトリガーを設定する。"
    implementation_tasks:
      - "ユースケースを実行するトップレベルの関数（エントリーポイント）を作成する。"
      - "GASの`ScriptApp`サービスを使い、時間ベースのトリガー（例: 10分ごと）を設定する。"
    acceptance_criteria:
      - "指定した間隔で自動投稿の処理が実行されること。"
    related_requirement: "US-001"
    dependencies:
      - "[UseCase] 予約ツイート自動投稿ユースケースの実装 (US-001)"
    milestone: "Release-1: MVP - 最速テキスト投稿"
    labels:
      - "type:chore"
      - "layer:infrastructure"
      - "epic:core-engine"
      - "priority:P0-must-have"

  - title: "[Refactoring] エントリーポイントにおける依存性注入を修正 (TASK-003)"
    description: |
      技術タスク `TASK-003` を実装する。
      > 開発者として、インフラ層のエントリーポイント（triggers.js）で、クリーンアーキテクチャの原則通りに依存性注入（DI）が行われるようにしたい。
      > それは、システムの保守性とテスト容易性を確保し、将来の機能拡張を容易にするためだ。
      > 現状、`runPostScheduledTweets`関数内で`SpreadsheetTweetRepository`が正しくインスタンス化されていない問題を解決する必要がある。
    implementation_tasks:
      - "hatolink/infrastructure/triggers.js を修正し、runPostScheduledTweets 関数内で SpreadsheetTweetRepository と TwitterApiAdapter のインスタンスを正しく生成する。"
      - "生成したインスタンスを PostScheduledTweetsUseCase のコンストラクタに注入（DI）する。"
      - "(TDD) 既存の tests/infrastructure/triggers.test.js を拡張し、依存性の注入が正しく行われることを検証するテストケースを追加する。"
    acceptance_criteria:
      - "runPostScheduledTweets関数内で、SpreadsheetTweetRepositoryとTwitterApiAdapterが正しくインスタンス化され、PostScheduledTweetsUseCaseに注入（DI）されること。"
      - "依存性の注入が完了し、US-001のシナリオがGAS上で正常に動作すること。"
    related_requirement: "TASK-003, CR-004, CR-007"
    dependencies:
      - "US-001"
    milestone: "技術的負債の返済"
    labels:
      - "type:refactoring"
      - "type:technical-task"
      - "layer:infrastructure"
      - "layer:adapter-db"
      - "epic:platform"
      - "priority:P0-must-have"

  - title: "[Refactoring] APIアダプタとUseCase間のエラーハンドリングの不整合を修正 (TASK-004)"
    description: |
      技術タスク `TASK-004` を実装する。
      > 開発者として、UseCaseがAdapterからのAPI失敗応答を確実に検知できるようにしたい。
      > それは、投稿失敗時に後続の処理（エラーログ記録やステータス更新など）を正しく実行できるようにするためだ。
      > 現状、Adapterが返すレスポンスオブジェクトをUseCaseが正しく解釈できていない問題を解決する必要がある。
    implementation_tasks:
      - "hatolink/adapter/api/TwitterApiAdapter.js の postTweet メソッドを修正し、失敗時に例外をスローするか、明確な失敗を示すオブジェクトを返すようにする。"
      - "hatolink/usecase/PostScheduledTweetsUseCase.js の execute メソッドを修正し、twitterApi.postTweet の呼び出しを try-catch ブロックで囲む。"
      - "APIの失敗を検知した場合、後続の tweet.status の更新や tweetRepository.save が呼び出されないようにロジックを修正する。"
      - "(TDD) tests/usecase/PostScheduledTweetsUseCase.test.js の「APIが失敗した場合」のテストを、実際の修正に合わせて更新・強化する。"
    acceptance_criteria:
      - "PostScheduledTweetsUseCaseが、twitterApi.postTweet(tweet)の戻り値（または例外）を評価し、APIの成功・失敗を正しく判断できること。"
      - "APIがエラー応答を返した場合に、後続のドメインオブジェクトのステータス更新や保存処理が実行されないこと。"
      - "上記を検証する単体テストがtests/usecase/PostScheduledTweetsUseCase.test.jsに存在すること。"
    related_requirement: "TASK-004, CR-005"
    dependencies:
      - "US-001"
      - "TASK-003"
    milestone: "技術的負債の返済"
    labels:
      - "type:refactoring"
      - "type:technical-task"
      - "layer:usecase"
      - "layer:adapter-api"
      - "epic:platform"
      - "priority:P0-must-have"
      - "TDD"

  - title: "[Refactoring] UseCaseからドメインのメソッドを呼び出すように修正 (TASK-005)"
    description: |
      技術タスク `TASK-005` を実装する。
      > 開発者として、UseCase層がドメインオブジェクトの状態を直接書き換えるのではなく、ドメインに定義されたメソッド（例: markAsPosted）を呼び出すようにしたい。
      > それは、ドメインの不変条件をドメイン層自身が保証する責務を維持し、モデルの堅牢性を高めるためだ。
    implementation_tasks:
      - "hatolink/usecase/PostScheduledTweetsUseCase.js の execute メソッド内で、tweet.status = '投稿済' のような直接的な状態変更をやめる。"
      - "代わりに、tweet.markAsPosted() のようなドメインエンティティに定義されたメソッドを呼び出すように修正する。"
      - "(TDD) tests/usecase/PostScheduledTweetsUseCase.test.js のテストで、markAsPosted メソッドが呼び出されたことをスパイやモックで検証する。"
    acceptance_criteria:
      - "PostScheduledTweetsUseCaseの投稿成功ロジックが、tweet.markAsPosted()メソッドを呼び出すように修正されていること。"
      - "ドメインオブジェクトの状態が直接操作されていないこと。"
    related_requirement: "TASK-005, CR-006"
    dependencies:
      - "US-001"
    milestone: "技術的負債の返済"
    labels:
      - "type:refactoring"
      - "type:technical-task"
      - "layer:usecase"
      - "layer:domain"
      - "epic:platform"
      - "priority:P1-should-have"
      - "TDD"

